package Interfaces;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import MainClass.Archivo;
import MainClass.Directorio;
import MainClass.SistemaArchivos;
import java.util.Enumeration;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

// Proyecto.pkg2.pkg2425.pkg2.so.victoriagarcia.Proyecto224252SOVictoriaGarcia.java;

public class Pantalla extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla
     */
    public SistemaArchivos sistema;
    public DefaultMutableTreeNode root;
    
    public Pantalla( SistemaArchivos sistema) {
        root = new DefaultMutableTreeNode(sistema.getRaiz().getNombre()); 
        initComponents();
        this.setLocationRelativeTo(null);
        this.sistema = sistema;
        jlabelAdminUser.setText("MODO: USUARIO");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ComboBoxCRUD = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombreB = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtreeArchivos = new javax.swing.JTree(root);
        jSpinnerTamanoArchivo = new javax.swing.JSpinner();
        jButton3 = new javax.swing.JButton();
        jlabelAdminUser = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jlabelCrearArchivo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        NuevoNombre = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonTransfer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        jLabel1.setText("Seleccionar Opcion");

        ComboBoxCRUD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Crear", "Leer", "Actualizar", "Eliminar", "Crear Subdirectorio", " " }));
        ComboBoxCRUD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxCRUDActionPerformed(evt);
            }
        });

        jLabel2.setText("Tama√±o Archivo:");

        jTextFieldNombreB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNombreBActionPerformed(evt);
            }
        });

        jButton1.setText("Carpeta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Carp:");

        jLabel4.setText("Arch:");

        jtreeArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtreeArchivosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtreeArchivos);

        jButton3.setText("Cambiar a vista de Admin/Usuario");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jlabelAdminUser.setText("DefaultText");

        jLabel6.setText("Nombre:");

        jlabelCrearArchivo.setText("Status: OK");

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Actualizar:");

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Nuevo Nombre:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButtonTransfer.setText("jButton4");
        jButtonTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jlabelCrearArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(93, 93, 93))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addGap(43, 43, 43))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jlabelAdminUser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonTransfer))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(131, 131, 131)
                                        .addComponent(jLabel5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerTamanoArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jTextFieldNombreB, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(ComboBoxCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton3)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(NuevoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(154, 154, 154))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNombreB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerTamanoArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel3)
                            .addComponent(jButton2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlabelCrearArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NuevoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jlabelAdminUser)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonTransfer)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(252, 252, 252))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Definir permisos
        String permisos;
        TreePath tp = jtreeArchivos.getSelectionPath();

        if (tp != null) {
            String ruta = tp.toString();

            if (sistema.isEsAdministrador()) {
                permisos = "RW";
            } else {
                permisos = "C";
            }

            // Comprobar si seleccionamos "Crear" en el ComboBox
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Crear")) {
                // Tomar el nombre del directorio desde el JTextField
                String nombreDirectorio = jTextFieldNombreB.getText();

                // Intentar crear el directorio usando la l√≥gica de backend
                boolean status = sistema.crearDirectorio(ruta, nombreDirectorio);

                if (status) {
                    // Si se cre√≥ correctamente, mostrar mensaje
                    jlabelCrearArchivo.setText("Directorio creado con √©xito");

                    // Agregar el directorio como "parent" en el JTree
                    DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                    DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

                    // Crear el nuevo nodo para el directorio
                    DefaultMutableTreeNode newDirNode = new DefaultMutableTreeNode(nombreDirectorio);

                    // Agregar el nuevo directorio como hijo del "root"
                    root.add(newDirNode);

                    // Refrescar el modelo del JTree para que el cambio sea visible
                    model.reload(root);
                } else {
                    jlabelCrearArchivo.setText("Error al crear Directorio");
                }
            }
        }
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Eliminar")) {
                

                if (tp != null) {
                    // Obtenemos el nodo seleccionado (el directorio que se quiere eliminar)
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();

                    // Obtenemos el modelo del √°rbol y la ra√≠z
                    DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                    DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

                    // Obtenemos el nombre del directorio a eliminar
                    String nombreDirectorio = selectedNode.toString();

                    // Como todo est√° colgado del root, la ruta es "root"
                    String ruta = "root";

                    // Llamamos al backend para eliminar el directorio
                    boolean status = sistema.eliminarDirectorio(ruta, nombreDirectorio);

                    if (status) {
                        // Eliminamos el nodo del JTree
                        root.remove(selectedNode);
                        model.reload(root);

                        // Mensaje de √©xito
                        jlabelCrearArchivo.setText("Directorio eliminado con √©xito");
                    } else {
                        jlabelCrearArchivo.setText("Error al eliminar el directorio");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio para eliminar");
                }
            }
            
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Actualizar")) {
                if (tp != null) {
                    // Obtener el nodo seleccionado (el directorio que se quiere actualizar)
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();

                    // Obtener el nombre del directorio actual y la nueva informaci√≥n
                    String nombreDirectorio = selectedNode.toString();
                    String nuevoNombre;  // Tomamos el nuevo nombre
                    nuevoNombre = NuevoNombre.getText();
                    
                    

                    // Llamamos al m√©todo de actualizaci√≥n en el backend
                    boolean status = sistema.actualizarDirectorio("root", nombreDirectorio, nuevoNombre);

                    if (status) {
                        // Si la actualizaci√≥n fue exitosa, actualizamos el nombre en el JTree
                        selectedNode.setUserObject(nuevoNombre);

                        // Refrescar el modelo del JTree para reflejar el cambio
                        DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                        model.reload();

                        // Mensaje de √©xito
                        jlabelCrearArchivo.setText("Directorio actualizado con √©xito");
                    } else {
                        jlabelCrearArchivo.setText("Error al actualizar el directorio");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio para actualizar");
                }
            }
        
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Leer")) {
                if (tp != null) {
                    // Obtener el nodo seleccionado (el directorio que quieres leer)
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    String nombreDirectorio = selectedNode.toString();

                    // Como lo cuelgas de root, podr√≠as usar "root" o la ruta que construyas
                    String ruta = "root"; // Podr√≠as construir la ruta completa a partir del √°rbol, pero "root" es el punto de partida

                    // Buscar el directorio en tu sistema (esto depender√° de la estructura de tu sistema de archivos)
                    Directorio directorio = sistema.buscarDirectorio(nombreDirectorio);

                    if (directorio != null) {
                        StringBuilder contenido = new StringBuilder();
                        contenido.append("Contenido del Directorio '").append(nombreDirectorio).append("':\n");

                        // Listar subdirectorios si existen
                        if (directorio.getSubdirectorios() != null && directorio.getSubdirectorios().getSize() > 0) {
                            contenido.append("Subdirectorios:\n");
                            for (int i = 0; i < directorio.getSubdirectorios().getSize(); i++) {
                                Directorio sub = (Directorio) directorio.getSubdirectorios().get(i);
                                contenido.append("- ").append(sub.getNombre()).append("\n");

                                // A√±adir subdirectorios al JTree si es necesario
                                DefaultMutableTreeNode subDirNode = new DefaultMutableTreeNode(sub.getNombre());
                                selectedNode.add(subDirNode); // Agregar como nodo hijo al nodo actual
                            }
                        } else {
                            contenido.append("No hay subdirectorios\n");
                        }

                        // Listar archivos si existen
                        if (directorio.getArchivos() != null && directorio.getArchivos().getSize() > 0) {
                            contenido.append("Archivos:\n");
                            for (int i = 0; i < directorio.getArchivos().getSize(); i++) {
                                Archivo archivo = (Archivo) directorio.getArchivos().get(i);
                                contenido.append("- ").append(archivo.getNombre())
                                         .append(" | Tama√±o: ").append(archivo.getTama√±o())
                                         .append(" | Permisos: ").append(archivo.getPermisos()).append("\n");
                            }
                        } else {
                            contenido.append("No hay archivos\n");
                        }

                        // Mostrar el contenido en el JLabel o consola
                        jlabelCrearArchivo.setText("<html>" + contenido.toString().replace("\n", "<br>") + "</html>");
                        System.out.println(contenido.toString()); // Tambi√©n puedes imprimirlo en consola
                    } else {
                        jlabelCrearArchivo.setText("No se encontr√≥ el directorio");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio para leer");
                }
            }
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Crear Subdirectorio")) {
                // Obtener el nodo seleccionado en el JTree (el directorio donde se quiere crear el subdirectorio)
                

                if (tp != null) {
                    // Obtener el nombre del subdirectorio desde el JTextField
                    String nombreSubdirectorio = jTextFieldNombreB.getText();

                    // Verificar si el nombre del subdirectorio no est√° vac√≠o
                    if (nombreSubdirectorio.isEmpty()) {
                        jlabelCrearArchivo.setText("El nombre del subdirectorio no puede estar vac√≠o.");
                        return;
                    }

                    // Convertir la ruta del directorio seleccionado a una cadena (formato adecuado)
                    String ruta = tp.toString().replace("[", "").replace("]", "").replace(", ", "/");

                    // Llamar al m√©todo crearSubdirectorio para intentar crear el subdirectorio
                    boolean status = sistema.crearSubdirectorio(ruta, nombreSubdirectorio);

                    if (status) {
                        // Si el subdirectorio se crea exitosamente en el sistema, agregarlo al JTree
                        DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();

                        // Crear el nuevo subdirectorio como un nodo hijo
                        DefaultMutableTreeNode newDirNode = new DefaultMutableTreeNode(nombreSubdirectorio);

                        // Agregar el subdirectorio como hijo del nodo seleccionado
                        selectedNode.add(newDirNode);

                        // Recargar el modelo del JTree para reflejar el nuevo subdirectorio
                        model.reload(selectedNode);

                        // Mostrar mensaje de √©xito
                        jlabelCrearArchivo.setText("Subdirectorio creado con √©xito");
                    } else {
                        jlabelCrearArchivo.setText("Error al crear subdirectorio");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio para crear un subdirectorio");
                }
            }
            
//            if (ComboBoxCRUD.getSelectedItem() == "Eliminar"){
//                boolean status;
//                
//                int tamano = (int) jSpinnerTamanoArchivo.getValue();
//                
//                    
//                status = sistema.eliminarDirectorio(ruta,jTextFieldNombreB.getText()
//                ,tamano, permisos);
//
//                if (status){
//                 
//                    jlabelCrearArchivo.setText("Directorio Eliminado con exito");
//                }else{
//                   jlabelCrearArchivo.setText("Error al eiminar Directorio");
//                }
//
//            }
//            if (ComboBoxCRUD.getSelectedItem() == "Actualizar"){
//                boolean status;
//                
//                int tamano = (int) jSpinnerTamanoArchivo.getValue();
//                
//                    
//                status = sistema.eliminarArchivo(ruta,jTextFieldNombreB.getText()
//                ,tamano, permisos);
//
//                if (status){
//                 
//                    jlabelCrearArchivo.setText("Editado con exito");
//                }else{
//                   jlabelCrearArchivo.setText("Error al editar");
//                }
//
//            }
            //if combobox = eliminar o if combobox = leer o if combobox = editar
                                               
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ComboBoxCRUDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxCRUDActionPerformed
      
    }//GEN-LAST:event_ComboBoxCRUDActionPerformed

    private void jTextFieldNombreBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNombreBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNombreBActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //If combobox Crear sistema.crearArchivo 2cosas:
        String permisos = null;
        TreePath tp = jtreeArchivos.getSelectionPath();
     
         // Si el ComboBox selecciona "Crear" (para crear archivo)
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Crear")) {
                boolean status;
                int tamano = (int) jSpinnerTamanoArchivo.getValue(); // Tama√±o del archivo desde el spinner

                if (tp != null) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    String nombreDirectorio = selectedNode.toString(); // Nombre del directorio seleccionado
                    String ruta = nombreDirectorio; 

                    // Establecer permisos seg√∫n si el usuario es administrador o no
                    permisos = sistema.isEsAdministrador() ? "RW" : "C";

                    // Llamar al m√©todo crearArchivo para crear el archivo en el sistema
                    status = sistema.crearArchivo(ruta, jTextFieldNombreB.getText(), tamano, permisos);

                    if (status) {
                        // Obtener el primer bloque asignado
                        int primerBloque = sistema.obtenerPrimerBloque(jTextFieldNombreB.getText());

                        // Crear el nodo con nombre, bloque y cantidad de bloques
                        DefaultMutableTreeNode newFileNode = new DefaultMutableTreeNode(
                            jTextFieldNombreB.getText() + 
                            " (Bloque: " + primerBloque + ", Tama√±o: " + tamano + " bloques)"
                        );

                        // Agregar el archivo como hijo del directorio seleccionado
                        selectedNode.add(newFileNode);

                        // Recargar el modelo del JTree para reflejar el nuevo archivo
                        DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                        model.reload(selectedNode);

                        // Mostrar mensaje de √©xito
                        jlabelCrearArchivo.setText("Archivo creado con √©xito");
                    } else {
                        jlabelCrearArchivo.setText("Error al crear archivo");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio");
                }
            }

            if (ComboBoxCRUD.getSelectedItem().toString().equals("Eliminar")) {
                // Primero obtenemos el nodo seleccionado (el directorio o archivo)
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                String nombreDirectorio = selectedNode.toString(); // Nombre del directorio seleccionado
                String ruta = nombreDirectorio;

                // Si el archivo est√° en el directorio y ya tiene el nombre ingresado en el TextField
                String nombreArchivo = jTextFieldNombreB.getText().trim();  // Nombre del archivo a eliminar

                if (!nombreArchivo.isEmpty()) {
                    // Comprobar si el archivo existe dentro del directorio
                    Enumeration<TreeNode> children = selectedNode.children();
                    boolean found = false;

                    // Buscar en los hijos del nodo seleccionado
                    while (children.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
                        if (child.toString().equalsIgnoreCase(nombreArchivo)) {
                            // Si el archivo es encontrado, se elimina
                            selectedNode.remove(child);  // Eliminar el hijo (archivo)
                            found = true;
                            break;
                        }
                    }

                    // Si el archivo fue encontrado y eliminado
                    if (found) {
                        // Llamamos al m√©todo para eliminar el archivo en el sistema
                        boolean status = sistema.eliminarArchivo(ruta, nombreArchivo);

                        if (status) {
                            // Recargamos el modelo del √°rbol para reflejar la eliminaci√≥n
                            DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                            model.reload(selectedNode);

                            
                        } else {
                            jlabelCrearArchivo.setText("Archivo se elimino,crear otro archivo para ver cambios o actualizar");
                        }
                    } else {
                        jlabelCrearArchivo.setText("No se encontr√≥ el archivo para eliminar");
                    }
                }else {
                    jlabelCrearArchivo.setText("Por favor ingresa el nombre del archivo a eliminar");
                }
            } else {
                jlabelCrearArchivo.setText("Selecciona un directorio para eliminar el archivo");
            }
        
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Actualizar")) {
                if (tp != null) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    String nombreDirectorio = selectedNode.toString(); // El directorio o archivo seleccionado
                    String ruta = nombreDirectorio;

                    // Nuevos datos a actualizar
                    String nombreArchivo = jTextFieldNombreB.getText().trim(); // Nombre del archivo a actualizar
                    String nuevoNombre = NuevoNombre.getText(); // Nuevo nombre del archivo
                    int nuevoTamano = (int) jSpinnerTamanoArchivo.getValue(); // Nuevo tama√±o

                    if (!nombreArchivo.isEmpty() && !nuevoNombre.isEmpty()) {
                        // Llamar al m√©todo actualizar en el sistema
                        boolean status = sistema.actualizarArchivo(ruta, nombreArchivo, nuevoNombre, nuevoTamano, permisos);

                        if (status) {
                            // Si el sistema lo actualiza, actualizamos el nombre del nodo en el JTree
                            Enumeration<TreeNode> children = selectedNode.children();
                            boolean found = false;

                            while (children.hasMoreElements()) {
                                DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
                                if (child.toString().equalsIgnoreCase(nombreArchivo)) {
                                    // Cambiar el nombre del nodo al nuevo nombre
                                    child.setUserObject(nuevoNombre);
                                    found = true;
                                    break;
                                }
                            }

                            // Recargamos el modelo del √°rbol para ver los cambios
                            if (found) {
                                DefaultTreeModel model = (DefaultTreeModel) jtreeArchivos.getModel();
                                model.reload(selectedNode);
                                jlabelCrearArchivo.setText("Archivo actualizado con √©xito");
                            } else {
                                jlabelCrearArchivo.setText("Archivo actualizado en el sistema, pero no encontrado en el √°rbol");
                            }
                        } else {
                            jlabelCrearArchivo.setText("Error al actualizar el archivo");
                        }
                    } else {
                        jlabelCrearArchivo.setText("Ingresa el nombre actual y el nuevo nombre del archivo");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio o archivo para actualizar");
                }
            }
            if (ComboBoxCRUD.getSelectedItem().toString().equals("Leer")) {
                if (tp != null) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    String nombreDirectorio = selectedNode.toString(); // Nombre del directorio seleccionado
                    String ruta = nombreDirectorio;

                    String nombreArchivo = jTextFieldNombreB.getText(); // Nombre del archivo a leer

                    if (!nombreArchivo.isEmpty()) {
                        // Buscar el archivo en el sistema
                        Archivo archivo = sistema.obtenerArchivo(sistema.buscarDirectorio(ruta), nombreArchivo);

                        if (archivo != null) {
                            // Mostrar la informaci√≥n del archivo
                            String info = "Nombre: " + archivo.getNombre() + 
                                          ", Tama√±o: " + archivo.getTama√±o() + 
                                          ", Permisos: " + archivo.getPermisos();
                            jlabelCrearArchivo.setText(info);
                        } else {
                            jlabelCrearArchivo.setText("No se encontr√≥ el archivo para leer");
                        }
                    } else {
                        jlabelCrearArchivo.setText("Por favor ingresa el nombre del archivo a leer");
                    }
                } else {
                    jlabelCrearArchivo.setText("Selecciona un directorio o archivo para leer");
                }
            }

//            if (ComboBoxCRUD.getSelectedItem() == "Actualizar"){
//                boolean status;
//                
//                int tamano = (int) jSpinnerTamanoArchivo.getValue();
//                
//                    
//                status = sistema.eliminarArchivo(ruta,jTextFieldNombreB.getText()
//                ,tamano, permisos);
//
//                if (status){
//                 
//                    jlabelCrearArchivo.setText("Editado con exito");
//                }else{
//                   jlabelCrearArchivo.setText("Error al editar");
//                }
//
//            }
            //if combobox = eliminar o if combobox = leer o if combobox = editar
          
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        sistema.cambiarModo();
        if(sistema.isEsAdministrador()){
            jlabelAdminUser.setText("MODO: ADMINISTRADOR");
        }else{
            jlabelAdminUser.setText("MODO: USUARIO");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jtreeArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtreeArchivosMouseClicked

    }//GEN-LAST:event_jtreeArchivosMouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransferActionPerformed
        // TODO add your handling code here:
        // Asumiendo que ya tienes el modelo del √°rbol y el modelo de la tabla como los siguientes:
        DefaultTreeModel treeModel = (DefaultTreeModel) jtreeArchivos.getModel();
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        // Establecer las columnas de la tabla, en este caso las columnas podr√≠an ser "Nombre", "Tama√±o", "Permisos"
        String[] columnNames = {"Nombre", "Tama√±o", "Permisos"};
        tableModel.setColumnIdentifiers(columnNames);

        // Limpiar cualquier dato previo
        tableModel.setRowCount(0);

        // Obtener la ra√≠z del √°rbol
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) treeModel.getRoot();

        // Primero, agregar los archivos que est√°n directamente en la ra√≠z (sin directorios)
        for (int i = 0; i < treeModel.getChildCount(root); i++) {
            DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) root.getChildAt(i);

            // Verificar si este es un archivo (no tiene hijos)
            if (node1.getChildCount() == 0) {
                String nodeInfo = node1.getUserObject().toString();
                String[] parts = nodeInfo.split(" \\(");  // Separar nombre y detalles
                String nombre = parts[0].trim();
                String info = parts.length > 1 ? parts[1].replace(")", "").trim() : "";

                // Dividir la informaci√≥n del archivo (tama√±o y permisos)
                String[] infoParts = info.split(", ");
                String tamano = infoParts.length > 0 ? infoParts[0].replace("Tama√±o: ", "") : "N/A";
                String permisos = infoParts.length > 1 ? infoParts[1].replace("Permiso: ", "") : "N/A";

                // Crear una fila con los valores extra√≠dos
                Object[] row = { nombre, tamano, permisos };

                // Agregar la fila al modelo de la tabla
                tableModel.addRow(row);
            }
        }

        // Ahora recorrer los nodos de directorios y agregar sus archivos
        for (int i = 0; i < treeModel.getChildCount(root); i++) {
            DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) root.getChildAt(i);

            // Verificar si el nodo tiene hijos (es un directorio con archivos)
            if (node1.getChildCount() > 0) {
                for (int j = 0; j < node1.getChildCount(); j++) {
                    DefaultMutableTreeNode node2 = (DefaultMutableTreeNode) node1.getChildAt(j);

                    // Suponiendo que el nombre del nodo tiene un formato: "Archivo1.txt (Tama√±o: 10, Permiso: RW)"
                    String nodeInfo = node2.getUserObject().toString();
                    String[] parts = nodeInfo.split(" \\(");  // Separar nombre y detalles
                    String nombre = parts[0].trim();
                    String info = parts.length > 1 ? parts[1].replace(")", "").trim() : "";

                    // Dividir la informaci√≥n del archivo (tama√±o y permisos)
                    String[] infoParts = info.split(", ");
                    String tamano = infoParts.length > 0 ? infoParts[0].replace("Tama√±o: ", "") : "N/A";
                    String permisos = infoParts.length > 1 ? infoParts[1].replace("Permiso: ", "") : "N/A";

                    // Crear una fila con los valores extra√≠dos
                    Object[] row = { nombre, tamano, permisos };

                    // Agregar la fila al modelo de la tabla
                    tableModel.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_jButtonTransferActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SistemaArchivos sistema = new SistemaArchivos(20);
                new Pantalla(sistema).setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxCRUD;
    private javax.swing.JTextField NuevoNombre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonTransfer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerTamanoArchivo;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNombreB;
    private javax.swing.JLabel jlabelAdminUser;
    private javax.swing.JLabel jlabelCrearArchivo;
    private javax.swing.JTree jtreeArchivos;
    // End of variables declaration//GEN-END:variables
}
